const TelegramBot = require('node-telegram-bot-api')
const wallets = require('./wallets')
const { mainOptionsRU,
    mainOptionsEN,
    privateRoundOptionsEN,
    privateRoundOptionsRU,
    amountOptions,
    tokenOptionsRU,
    tokenOptionsEN,
    chainOptions,
    languageOptions,
    doneOptionsRU,
    doneOptionsEN,
    againOptionsRU,
    againOptionsEN,
    whiteListOptionsEN,
    whiteListOptionsRU,
    checkUserOptionsEN,
    checkUserOptionsRU,
    detailsOptionsEN,
    detailsOptionsRU,
    amountOptionsEN,
    amountOptionsRU
}  = require('./options')
const request = require('request');
const convert = require('xml-js');
const mongoose = require('mongoose');
const user = require('./models/user');
require('dotenv').config();

const uri = `mongodb+srv://${process.env.MONGODB_USERNAME}:${process.env.MONGODB_PASSWORD}@${process.env.MONGODB_DB_NAME}.net`

const bot = new TelegramBot(process.env.BOT_TOKEN, {polling: true})

const tokenMsg = [
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–∫–µ–Ω',
    'Choose token'
]

const amountMsg = [
    '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é',
    'Choose amount or input manually'
]

const chainMsg = [
    '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å',
    'Choose chain'
]

const helloMsg = [
    `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç NFT GameFi –ø—Ä–æ–µ–∫—Ç–∞ Meta Demos.ü§ñ\nü§û–¢—ã –Ω–∞—à–µ–ª –º–µ–Ω—è –∏ —ç—Ç–æ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ! –ó–¥–µ—Å—å –º—ã –ø—Ä–æ–≤–æ–¥–∏–º Private Round: –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —Ü–µ–Ω–µ –Ω–∏–∂–µ TGE\nüî•–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –±—É–¥–µ–º —Ç–µ—Ä—è—Ç—å –≤—Ä–µ–º—è! –¢—ã —Å –Ω–∞–º–∏? ‚è∞`,
    `Hey, I'm the bot of Meta Demos project.ü§ñ\nü§ûYou found me, and it's no accident! Here we are holding a Private Round: project token SALE below TGE\nüî•Places are limited, so let's not waste any time! Are you in? ‚è∞`
]

const detailsMsg = [
    `‚ùóÔ∏è–•–æ—Ä–æ—à–∞—è —Ç—Ä–∞–¥–∏—Ü–∏—è –≤ –∏–Ω–¥—É—Å—Ç—Ä–∏–∏ ‚Äî —Ä–∞–Ω–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –ø–æ–ª—É—á–∞—é—Ç —Å–∞–º—É—é –≤—ã–≥–æ–¥–Ω—É—é —Ü–µ–Ω—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ –ª–∏—Å—Ç–∏–Ω–≥–∞: —Å–µ–π—á–∞—Å —Ü–µ–Ω–∞ –Ω–∞ 40% –Ω–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ IDO –∏ –≥–æ—Ä–∞–∑–¥–æ –Ω–∏–∂–µ TGE.\n–ü—Ä–æ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ –±–∏—Ä–∂–µ, –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–≤ –ø—Ä–∏–±—ã–ª—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –±—É–¥—É—â–µ–µ, –æ–∂–∏–¥–∞—è –∏–∫—Å–æ–≤, ‚Äî –≤–∞—à–µ –ª–∏—á–Ω–æ–µ –¥–µ–ª–æ.\n‚åõ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:\n50$ ‚Äî 500 —á–µ–ª–æ–≤–µ–∫\n100$ ‚Äî 100 —á–µ–ª–æ–≤–µ–∫\n500$ ‚Äî 25 —á–µ–ª–æ–≤–µ–∫\n1000$ ‚Äî 10 —á–µ–ª–æ–≤–µ–∫\n–ü—Ä–æ–≤–µ–¥—è –ø–æ–∫—É–ø–∫—É, –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ Whitelist. –¢–æ–∫–µ–Ω—ã MEDOS –±—É–¥—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ª–∏—Å—Ç–∏–Ω–≥–∞.\n1 Medos = $ 0,012\n10% TGE, 1 –º–µ—Å—è—Ü cliff, –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π vesting –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞.\nüì≤ –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –≤—Å—Ç—É–ø–∞—Ç—å –≤ –Ω–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏`,
    `‚ùóÔ∏èThe wonderful tradition in the industry says that early investors get the best price when buying tokens before listing: the price is now 40% lower than the upcoming IDO and far below the TGE.\nSelling the token on the exchange to lock in a profit or leave tokens for the future, awaiting profit multiplication is entirely up to you!\n‚åõ Capacity:\n$50 - 500 people\n$100 - 100 people\n$500 - 25 people\n$1,000 - 10 people\nAfter the purchase, your wallet address will appear on Whitelist. MEDOS tokens will go to the wallet immediately after listing.\n1 Medos = $ 0,012\n10% TGE, 1-month cliff, daily vesting for a year.\nüì≤ Don't forget to join our social networks to keep up with the news!`,
]

const errMsg = [
    '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ',
    'Enter a number'
]
const tokens = ['ethereum', 'tether', 'usd-coin', 'dai', 'binance-usd', 'bitcoin']
const tokenSymbols = {'tether': 'USDT', 'usd-coin': 'USDC', 'dai': 'DAI', 'binance-usd': 'BUSD'}
const chains = ['eth', 'binance', 'tron', 'polygon']
// async function startDeposit(chatId) {
// }

const lang = {}
const userToken = {}
const userChain = {}
const users = {}
const done = {}
const emailInput = {}
const checkUser = {}
const stage = {}
const tokenAddresses = ['']
async function getTokenUSDPrice (tokenSymbol) {
    return [1.02, tokenSymbol]
}

async function getRubPrice() {
    const today = new Date();
    const dd = String(today.getDate()).padStart(2, '0');
    const mm = String(today.getMonth() + 1).padStart(2, '0');
    const yyyy = today.getFullYear();

    const currentDate = dd + '/' + mm + '/' + yyyy;
    const cbrApiUrl = 'https://www.cbr.ru/scripts/XML_daily.asp?date_req=' + currentDate
    return new Promise((resolve, reject) => {
        request({
            uri: cbrApiUrl,
            method: 'GET',
            encoding: 'utf-8'
        }, function (error, response, body) {
            console.error('error:', error); // Print the error if one occurred
            // console.log('statusCode:', response.toString() && response.statusCode); // Print the response status code if a response was received
            const result = convert.xml2json(body, {compact: true, spaces: 4});
            const json = JSON.parse(result)
            const valutes = json.ValCurs.Valute
            for (let i = 0; i < valutes.length; ++i) {
                if (valutes[i].CharCode._text == 'USD') {
                    resolve(parseFloat(valutes[i].Value._text.replace(/,/g, '.')))
                }
            }
          });
    })
}

async function save (userData, username) {
    const { address, chain, amountToSend, priceUSD, amountUSD, symbol, card, hash } = userData
    const amount = amountToSend
    const email = ''
    const depositData = 
    {
        address,
        hash,
        email,
        chain,
        amount,
        amountUSD,
        priceUSD,
        symbol,
        card,
    }
    console.log('Trying to add deposit', username, depositData)
    user.findOneAndUpdate({username: username}, {$push: {deposits: depositData}, updatedAt: Date.now()}, function (err, res) {
        if(err) {
            console.log(err)
        } else {
            console.log('User updated', res)
        }
    })
    // user.updateMany({username: users[chatId].username}, mongoData, function (err, res) {
    //     if(err) {
    //         console.log(err)
    //     } else {
    //         console.log('User updated', res)
    //     }
    // })

}

async function saveEmail(email, username) {
    console.log(email)

    user.updateOne(
        {username: username}, 
        { "$set": { "deposits.$[].email": email } }, 
        function (err, res) {
            if(err) {
                console.log(err)
            } else {
                console.log('User updated', res)
            }
    })
}

async function initUser(username) {
    const mongoData = new user(
        {
            username,
            deposits: [],
            updatedAt: Date.now()
        }
    )
    const usersData = await user.find({})
    const userIndex = usersData.findIndex(item => item.username === username)
    if (userIndex === -1) {
        mongoData.save()
    } 
}

async function main () {

    mongoose
        .connect(uri, { useNewUrlParser: true, useUnifiedTopology: true })
        .then((res) => {
            console.log('Connected db')
        })
        .catch((error) => console.log(error));
    
    bot.setMyCommands([
        {command: '/start', description: 'Main function'},
    ])
    
    bot.on('message', async (msg) => {
        const text = msg.text
        const chatId = msg.chat.id
        if (text === '/start') {
            await initUser(msg.from.username)
            users[chatId] = {
                username: msg.from.username
            }
            const a = await user.find({username: msg.from.username})
            console.log(a)
            await bot.sendMessage(chatId, `Choose language / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫`, languageOptions)
        } else if (msg.text && stage[chatId] === 'hash_input') {
            const hash = msg.text
            users[chatId] = {
                hash: hash,
                ...users[chatId]
            }
            const newUserData = users[chatId]
            await save(newUserData, msg.from.username)

            // user.updateOne({username: msg.from.username}, {hash: hash, updatedAt: Date.now()}, function (err, res) {
            //     if(err) {
            //         console.log(err)
            //     } else {
            //         console.log('User updated', res)
            //     }
            // })
            stage[chatId] = null
            emailInput[chatId] = true
            done[chatId] = false
            const message = lang[chatId] ? `Your wallet will be included in Whitelist within 24 hours. Insert your email (just in case)` : `–°–ø–∞—Å–∏–±–æ! –ü–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –í–∞—à –∫–æ—à–µ–ª–µ–∫ –ø–æ—è–≤–∏—Ç—Å—è –≤ Whitelist –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à email –¥–ª—è —Å–≤—è–∑–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º`

            await bot.sendMessage(chatId, message)
        } else if (!msg.text.toString().includes('0x') && stage[chatId] === 'wallet_input') {
            const msg = lang[chatId] ? `Invalid address. Enter the address again` : `–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –µ—â–µ —Ä–∞–∑`
            await bot.sendMessage(chatId, msg)
        } else if (msg.text.toString().replace(/\s/g, '').length === 16 && stage[chatId] === 'card_input') {
            const card = msg.text
            users[chatId] = {
                card: card,
                ...users[chatId]
            }
            stage[chatId] = 'wallet_input'
            done[chatId] = true
            const message = `–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –≤ —Å–µ—Ç–∏ BSC –¥–ª—è –∑–∞–Ω–µ—Å–µ–Ω–∏—è –µ–≥–æ –≤ Whitelist –∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ $MEDOS`
            await bot.sendMessage(chatId, message)    

        } else if (Number(msg.text) > 0 && userToken[chatId] && userChain[chatId] && !msg.text.toString().includes('0x')) {
            const userAmount = Number(msg.text)
            if (userChain[chatId] === 'btc') {
                const [priceUSD, symbol] = await getTokenUSDPrice(userToken[chatId])
                const amountToSend = (1/priceUSD * userAmount).toFixed(6)
                const address = wallets.wallets.btc[0]
                users[chatId] = {
                    amountUSD: userAmount,
                    amountToSend,
                    priceUSD,
                    symbol,
                    ...users[chatId]
                }
                const message = lang[chatId] ? `Send ${Number(amountToSend)} ${tokenSymbols[symbol]} on address ${address} then click "Done"` : `–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${Number(amountToSend)} ${tokenSymbols[symbol]} –Ω–∞ –¥–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: ${address}, –∑–∞—Ç–µ–º –∫–ª–∏–∫–Ω–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"`
                const options = lang[chatId] ? doneOptionsEN : doneOptionsRU
                await bot.sendMessage(chatId, message, options)
            } else if (userToken[chatId] === 'fiat') {
                const priceUSD = await getRubPrice()
                const amountToSend = parseInt(userAmount * priceUSD * 1.1)
                const card = wallets.wallets.fiat[0]
                users[chatId] = {
                    amountUSD: userAmount,
                    symbol: 'fiat',
                    amountToSend,
                    priceUSD,
                    ...users[chatId]
                }
                await bot.sendMessage(chatId, `–û—Ç–ø—Ä–∞–≤—å—Ç–µ ${amountToSend} —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É ${card} –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"`, doneOptionsRU)
            } else {
                const [priceUSD, symbol] = await getTokenUSDPrice(userToken[chatId])
                let amountToSend = (1/priceUSD * userAmount).toFixed(6)
                if (['usd-coin', 'dai', 'tether', 'binance-usd'].includes(userToken[chatId])) {
                    amountToSend = amountToSend < userAmount ? userAmount : Number(amountToSend).toFixed(2)
                }
                users[chatId] = {
                    amountUSD: userAmount,
                    amountToSend,
                    priceUSD,
                    symbol,
                    ...users[chatId]
                }
                const message = lang[chatId] ? `Send ${Number(amountToSend)} ${symbol} on address ${wallets.wallets[userChain[chatId]][0]} then click "Done"` : `–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${Number(amountToSend)} ${symbol} –Ω–∞ –¥–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: ${wallets.wallets[userChain[chatId]][0]}, –∑–∞—Ç–µ–º –∫–ª–∏–∫–Ω–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"`
                const options = lang[chatId] ? doneOptionsEN : doneOptionsRU
                await bot.sendMessage(chatId, message, options)
            }
        } else if (done[chatId]) {
            const address = msg.text
            users[chatId] = {
                chain: userChain[chatId],
                address: address,
                ...users[chatId]
            }
            if (users[chatId].symbol !== 'fiat') {
                stage[chatId] = 'hash_input'
                const message = lang[chatId] ? `Enter the transaction hash to confirm the transfer` : `–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞`
                await bot.sendMessage(chatId, message)    
            } else {
                stage[chatId] = null
                emailInput[chatId] = true
                done[chatId] = false
                const message = lang[chatId] ? `Your wallet will be included in Whitelist within 24 hours. Insert your email (just in case)` : `–°–ø–∞—Å–∏–±–æ! –ü–µ—Ä–µ–≤–æ–¥ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –í–∞—à –∫–æ—à–µ–ª–µ–∫ –ø–æ—è–≤–∏—Ç—Å—è –≤ Whitelist –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à email –¥–ª—è —Å–≤—è–∑–∏ –∏ —Ä–µ—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º`
                await bot.sendMessage(chatId, message)    
            }
        } else if (emailInput[chatId]) {
            emailInput[chatId] = false
            const email = msg.text
            users[chatId] = {
                email,
                ...users[chatId]
            }
            await saveEmail(email, msg.from.username)
            const message = lang[chatId] ? `Make sure you subscribed to our Telegram channel so you don't miss any breaking news: https://t.me/metademos_news` : `–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ä–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ https://t.me/MetaDemosFun`
            const options = lang[chatId] ? againOptionsEN : againOptionsRU
            await bot.sendMessage(chatId, message, options)
        } else if (checkUser[chatId]) {
            checkUser[chatId] = false
            const usersData = await user.find({})
            const newUsersData = usersData.filter(item => item.address === msg.text)
            const usdAmount = newUsersData.reduce((acc, item) => {
                return acc + item.amountUSD
            }, 0)
            if (usdAmount) {
                const message = lang[chatId] ? `Wallet ${msg.text} is on the white list. Invested amount ${usdAmount} USD` : `–ö–æ—à–µ–ª–µ–∫ ${msg.text} –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ. –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ ${usdAmount} USD`
                const options = lang[chatId] ? checkUserOptionsEN : checkUserOptionsRU
                await bot.sendMessage(chatId, message, options)
            } else {
                const message = lang[chatId] ? `Wallet ${msg.text} is not on the white list.` : `–ö–æ—à–µ–ª–µ–∫ ${msg.text} –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ`
                const options = lang[chatId] ? checkUserOptionsEN : checkUserOptionsRU
                await bot.sendMessage(chatId, message, options)
            }
        }
    });

    bot.on('callback_query', async (msg) => {
        const data = msg.data
        const chatId = msg.message.chat.id
        if (data === 'start_again') {
            userToken[chatId] = ''
            userChain[chatId] = ''
            users[chatId] = {}
            done[chatId] = false
            emailInput[chatId] = null
            checkUser[chatId] = null
            stage[chatId] = null
            const options = lang[chatId] ? mainOptionsEN : mainOptionsRU
            await bot.sendMessage(chatId, helloMsg[lang[chatId]], options)
        }
        else if (data === 'ru' || data === 'en') {
            lang[chatId] = data === 'ru' ? 0 : 1
            const options = lang[chatId] ? mainOptionsEN : mainOptionsRU
            await bot.sendMessage(chatId, helloMsg[lang[chatId]], options)
        }
        else if (data === 'private_round') {
            userToken[chatId] = ''
            userChain[chatId] = ''
            users[chatId] = {}
            done[chatId] = false
            emailInput[chatId] = null
            checkUser[chatId] = null
            stage[chatId] = null
            const options = lang[chatId] ? privateRoundOptionsEN : privateRoundOptionsRU
            const message = lang[chatId] ? 'Participate in a private token sale round' :'–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —Ä–∞—É–Ω–¥–µ –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–æ–≤'
            await bot.sendMessage(chatId, message, options)
        }
        else if (data === 'buy') {
            userToken[chatId] = ''
            userChain[chatId] = ''
            users[chatId] = {}
            done[chatId] = false
            emailInput[chatId] = null
            checkUser[chatId] = null
            stage[chatId] = null
            const options = lang[chatId] ? tokenOptionsEN : tokenOptionsRU
            await bot.sendMessage(chatId, tokenMsg[lang[chatId]], options)
        }

        else if (tokens.includes(data)) {
            if (data === 'bitcoin') {
                userToken[chatId] = 'bitcoin'
                userChain[chatId] = 'btc'
                const options = lang[chatId] ? amountOptionsEN : amountOptionsRU
                await bot.sendMessage(chatId, amountMsg[lang[chatId]], options)
            } else {
                userToken[chatId] = data
                await bot.sendMessage(chatId, chainMsg[lang[chatId]], chainOptions)
            }
        }
        else if(Number(data) > 0) {
            const userAmount = Number(data)
            if (userChain[chatId] === 'btc') {
                const [priceUSD, symbol] = await getTokenUSDPrice(userToken[chatId])
                const amountToSend = (1/priceUSD * data).toFixed(6)
                const address = wallets.wallets.btc[0]
                users[chatId] = {
                    amountUSD: userAmount,
                    amountToSend,
                    priceUSD,
                    symbol
                }
                const message = lang[chatId] ? `Send ${Number(amountToSend)} ${symbol} on address ${address} then click "Done"` : `–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${Number(amountToSend)} ${symbol} –Ω–∞ –¥–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: ${address}, –∑–∞—Ç–µ–º –∫–ª–∏–∫–Ω–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"`
                const options = lang[chatId] ? doneOptionsEN : doneOptionsRU

                await bot.sendMessage(chatId, message, options)
            } else if (userToken[chatId] === 'fiat') {
                const priceUSD = await getRubPrice()
                const amountToSend = parseInt(userAmount * priceUSD * 1.1)
                const card = wallets.wallets.fiat[0]
                users[chatId] = {
                    amountUSD: userAmount,
                    symbol: 'fiat',
                    amountToSend,
                    priceUSD,
                    ...users[chatId]
                }
                await bot.sendMessage(chatId, `–û—Ç–ø—Ä–∞–≤—å—Ç–µ ${amountToSend} —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É ${card} –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"`, doneOptionsRU)
            } else {
                const [priceUSD, symbol] = await getTokenUSDPrice(userToken[chatId])
                let amountToSend = (1/priceUSD * data).toFixed(6)
                if (['usd-coin', 'dai', 'tether', 'binance-usd'].includes(userToken[chatId])) {
                    amountToSend = amountToSend < Number(data) ? data : Number(amountToSend).toFixed(2)
                }
                users[chatId] = {
                    amountUSD: userAmount,
                    amountToSend,
                    priceUSD,
                    symbol,
                    ...users[chatId]
                }
                const message = lang[chatId] ? `Send ${Number(amountToSend)} ${tokenSymbols[symbol]} on address ${wallets.wallets[userChain[chatId]][0]} then click "Done"` : `–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${Number(amountToSend)} ${tokenSymbols[symbol]} –Ω–∞ –¥–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: ${wallets.wallets[userChain[chatId]][0]}, –∑–∞—Ç–µ–º –∫–ª–∏–∫–Ω–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"`
                const options = lang[chatId] ? doneOptionsEN : doneOptionsRU

                await bot.sendMessage(chatId, message, options)
            }
        }
        else if(chains.includes(data)) {
            userChain[chatId] = data
            const options = lang[chatId] ? amountOptionsEN : amountOptionsRU
            await bot.sendMessage(chatId, amountMsg[lang[chatId]], options)
        }
        else if (data === 'fiat') {
            userChain[chatId] = data
            userToken[chatId] = data
            await bot.sendMessage(chatId, amountMsg[lang[chatId]], amountOptionsRU)
        }
        else if (data === 'whitelist') {
            const options = lang[chatId] ? whiteListOptionsEN : whiteListOptionsRU
            const message = lang[chatId] ? `Here you can check if your wallet is whitelisted` : `–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç–µ`
            await bot.sendMessage(chatId, message, options)
        }
        else if (data === 'check_wallet') {
            checkUser[chatId] = true
            const message = lang[chatId] ? 'Enter a wallet address that you want to check for the whitelist' : '–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ —Å–ø–∏—Å–∫–µ'
            await bot.sendMessage(chatId, message)
        }
        else if (data === 'details') {
            const options = lang[chatId] ? detailsOptionsEN : detailsOptionsRU
            await bot.sendMessage(chatId, detailsMsg[lang[chatId]], options)
        }
        else if (data === 'done') {
            if (userToken[chatId] === 'fiat') {
                stage[chatId] = 'card_input'
                await bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞')
            } else {
                stage[chatId] = 'wallet_input'
                done[chatId] = true
                const msg = lang[chatId] ? `Insert your BSC wallet address to be added to the Whitelist and receive $MEDOS tokens` : `–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –≤ —Å–µ—Ç–∏ BSC –¥–ª—è –∑–∞–Ω–µ—Å–µ–Ω–∏—è –µ–≥–æ –≤ Whitelist –∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ $MEDOS`
                await bot.sendMessage(chatId, msg)    
            }
        }
    })
}

main()